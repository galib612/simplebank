// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: users.sql

package authdb

import (
	"context"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO users (
  UserName, Passwd
) VALUES (
  ?, ?
)
`

type CreateUserParams struct {
	Username string `json:"username"`
	Passwd   string `json:"passwd"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser, arg.Username, arg.Passwd)
	return err
}

const deleteUser = `-- name: DeleteUser :execrows
DELETE FROM users WHERE UserName = ?
`

func (q *Queries) DeleteUser(ctx context.Context, username string) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteUser, username)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getUser = `-- name: GetUser :exec
SELECT id, username, passwd, created_at FROM users
WHERE UserName = ? AND Passwd = ? 
LIMIT 1
`

type GetUserParams struct {
	Username string `json:"username"`
	Passwd   string `json:"passwd"`
}

func (q *Queries) GetUser(ctx context.Context, arg GetUserParams) error {
	_, err := q.db.ExecContext(ctx, getUser, arg.Username, arg.Passwd)
	return err
}

const listUser = `-- name: ListUser :many
SELECT id, username, passwd, created_at FROM users
ORDER BY id
LIMIT ?
OFFSET ?
`

type ListUserParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUser(ctx context.Context, arg ListUserParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUser, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Passwd,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
SET Passwd = ?
WHERE UserName = ?
`

type UpdateUserParams struct {
	Passwd   string `json:"passwd"`
	Username string `json:"username"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser, arg.Passwd, arg.Username)
	return err
}
